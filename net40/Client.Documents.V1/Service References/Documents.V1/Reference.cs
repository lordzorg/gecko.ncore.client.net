//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18010
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Gecko.NCore.Client.Documents.V1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DocumentCriteria", Namespace="http://schemas.datacontract.org/2004/07/Ephorte.ServiceModel.Contracts.Documents." +
        "V1")]
    [System.SerializableAttribute()]
    public partial class DocumentCriteria : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DocumentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Gecko.NCore.Client.Documents.V1.EphorteIdentity EphorteIdentityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VariantField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DocumentId {
            get {
                return this.DocumentIdField;
            }
            set {
                if ((this.DocumentIdField.Equals(value) != true)) {
                    this.DocumentIdField = value;
                    this.RaisePropertyChanged("DocumentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Gecko.NCore.Client.Documents.V1.EphorteIdentity EphorteIdentity {
            get {
                return this.EphorteIdentityField;
            }
            set {
                if ((object.ReferenceEquals(this.EphorteIdentityField, value) != true)) {
                    this.EphorteIdentityField = value;
                    this.RaisePropertyChanged("EphorteIdentity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Variant {
            get {
                return this.VariantField;
            }
            set {
                if ((object.ReferenceEquals(this.VariantField, value) != true)) {
                    this.VariantField = value;
                    this.RaisePropertyChanged("Variant");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Version {
            get {
                return this.VersionField;
            }
            set {
                if ((this.VersionField.Equals(value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EphorteIdentity", Namespace="http://schemas.datacontract.org/2004/07/Ephorte.ServiceModel.Contracts")]
    [System.SerializableAttribute()]
    public partial class EphorteIdentity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DatabaseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExternalSystemNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Database {
            get {
                return this.DatabaseField;
            }
            set {
                if ((object.ReferenceEquals(this.DatabaseField, value) != true)) {
                    this.DatabaseField = value;
                    this.RaisePropertyChanged("Database");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Role {
            get {
                return this.RoleField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleField, value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string ExternalSystemName {
            get {
                return this.ExternalSystemNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ExternalSystemNameField, value) != true)) {
                    this.ExternalSystemNameField = value;
                    this.RaisePropertyChanged("ExternalSystemName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.gecko.no/ephorte/services/documents/v1", ConfigurationName="Documents.V1.DocumentsService")]
    public interface DocumentsService {
        
        // CODEGEN: Generating message contract since the operation Checkin is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v1/DocumentsService/Checkin", ReplyAction="http://www.gecko.no/ephorte/services/documents/v1/DocumentsService/CheckinRespons" +
            "e")]
        Gecko.NCore.Client.Documents.V1.CheckinResponse Checkin(Gecko.NCore.Client.Documents.V1.CheckinMessage request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v1/DocumentsService/CancelCheckout" +
            "", ReplyAction="http://www.gecko.no/ephorte/services/documents/v1/DocumentsService/CancelCheckout" +
            "Response")]
        void CancelCheckout(Gecko.NCore.Client.Documents.V1.EphorteIdentity identity, int journalpostId, int documentId, int version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v1/DocumentsService/Checkout", ReplyAction="http://www.gecko.no/ephorte/services/documents/v1/DocumentsService/CheckoutRespon" +
            "se")]
        System.IO.Stream Checkout(Gecko.NCore.Client.Documents.V1.EphorteIdentity identity, int documentId, int version, string variant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v1/DocumentsService/GetDocumentCon" +
            "tent", ReplyAction="http://www.gecko.no/ephorte/services/documents/v1/DocumentsService/GetDocumentCon" +
            "tentResponse")]
        System.IO.Stream GetDocumentContent(Gecko.NCore.Client.Documents.V1.EphorteIdentity identity, int documentId, int version, string variant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v1/DocumentsService/GetDocumentCon" +
            "tentByDokBeskrivId", ReplyAction="http://www.gecko.no/ephorte/services/documents/v1/DocumentsService/GetDocumentCon" +
            "tentByDokBeskrivIdResponse")]
        System.IO.Stream GetDocumentContentByDokBeskrivId(Gecko.NCore.Client.Documents.V1.EphorteIdentity identity, int dokumentId, int version, string variant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v1/DocumentsService/GetDocumentCon" +
            "tentByJournalPostId", ReplyAction="http://www.gecko.no/ephorte/services/documents/v1/DocumentsService/GetDocumentCon" +
            "tentByJournalPostIdResponse")]
        System.IO.Stream GetDocumentContentByJournalPostId(Gecko.NCore.Client.Documents.V1.EphorteIdentity identity, int journalpostId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v1/DocumentsService/GetDocumentCon" +
            "tentByMoId", ReplyAction="http://www.gecko.no/ephorte/services/documents/v1/DocumentsService/GetDocumentCon" +
            "tentByMoIdResponse")]
        System.IO.Stream GetDocumentContentByMoId(Gecko.NCore.Client.Documents.V1.EphorteIdentity identity, int moId, string documentType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v1/DocumentsService/GetDocumentCon" +
            "tentByUbId", ReplyAction="http://www.gecko.no/ephorte/services/documents/v1/DocumentsService/GetDocumentCon" +
            "tentByUbIdResponse")]
        System.IO.Stream GetDocumentContentByUbId(Gecko.NCore.Client.Documents.V1.EphorteIdentity identity, int ubId, string sakType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v1/DocumentsService/GetDocumentFil" +
            "eName", ReplyAction="http://www.gecko.no/ephorte/services/documents/v1/DocumentsService/GetDocumentFil" +
            "eNameResponse")]
        string GetDocumentFileName(Gecko.NCore.Client.Documents.V1.EphorteIdentity identity, int documentId, int version, string variant);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CheckinMessage", WrapperNamespace="http://www.gecko.no/ephorte/services/documents/v1", IsWrapped=true)]
    public partial class CheckinMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.gecko.no/ephorte/services/documents/v1")]
        public Gecko.NCore.Client.Documents.V1.DocumentCriteria DocumentCriteria;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.gecko.no/ephorte/services/documents/v1", Order=0)]
        public System.IO.Stream Content;
        
        public CheckinMessage() {
        }
        
        public CheckinMessage(Gecko.NCore.Client.Documents.V1.DocumentCriteria DocumentCriteria, System.IO.Stream Content) {
            this.DocumentCriteria = DocumentCriteria;
            this.Content = Content;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CheckinResponse {
        
        public CheckinResponse() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface DocumentsServiceChannel : Gecko.NCore.Client.Documents.V1.DocumentsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DocumentsServiceClient : System.ServiceModel.ClientBase<Gecko.NCore.Client.Documents.V1.DocumentsService>, Gecko.NCore.Client.Documents.V1.DocumentsService {
        
        public DocumentsServiceClient() {
        }
        
        public DocumentsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DocumentsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DocumentsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DocumentsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Gecko.NCore.Client.Documents.V1.CheckinResponse Gecko.NCore.Client.Documents.V1.DocumentsService.Checkin(Gecko.NCore.Client.Documents.V1.CheckinMessage request) {
            return base.Channel.Checkin(request);
        }
        
        public void Checkin(Gecko.NCore.Client.Documents.V1.DocumentCriteria DocumentCriteria, System.IO.Stream Content) {
            Gecko.NCore.Client.Documents.V1.CheckinMessage inValue = new Gecko.NCore.Client.Documents.V1.CheckinMessage();
            inValue.DocumentCriteria = DocumentCriteria;
            inValue.Content = Content;
            Gecko.NCore.Client.Documents.V1.CheckinResponse retVal = ((Gecko.NCore.Client.Documents.V1.DocumentsService)(this)).Checkin(inValue);
        }
        
        public void CancelCheckout(Gecko.NCore.Client.Documents.V1.EphorteIdentity identity, int journalpostId, int documentId, int version) {
            base.Channel.CancelCheckout(identity, journalpostId, documentId, version);
        }
        
        public System.IO.Stream Checkout(Gecko.NCore.Client.Documents.V1.EphorteIdentity identity, int documentId, int version, string variant) {
            return base.Channel.Checkout(identity, documentId, version, variant);
        }
        
        public System.IO.Stream GetDocumentContent(Gecko.NCore.Client.Documents.V1.EphorteIdentity identity, int documentId, int version, string variant) {
            return base.Channel.GetDocumentContent(identity, documentId, version, variant);
        }
        
        public System.IO.Stream GetDocumentContentByDokBeskrivId(Gecko.NCore.Client.Documents.V1.EphorteIdentity identity, int dokumentId, int version, string variant) {
            return base.Channel.GetDocumentContentByDokBeskrivId(identity, dokumentId, version, variant);
        }
        
        public System.IO.Stream GetDocumentContentByJournalPostId(Gecko.NCore.Client.Documents.V1.EphorteIdentity identity, int journalpostId) {
            return base.Channel.GetDocumentContentByJournalPostId(identity, journalpostId);
        }
        
        public System.IO.Stream GetDocumentContentByMoId(Gecko.NCore.Client.Documents.V1.EphorteIdentity identity, int moId, string documentType) {
            return base.Channel.GetDocumentContentByMoId(identity, moId, documentType);
        }
        
        public System.IO.Stream GetDocumentContentByUbId(Gecko.NCore.Client.Documents.V1.EphorteIdentity identity, int ubId, string sakType) {
            return base.Channel.GetDocumentContentByUbId(identity, ubId, sakType);
        }
        
        public string GetDocumentFileName(Gecko.NCore.Client.Documents.V1.EphorteIdentity identity, int documentId, int version, string variant) {
            return base.Channel.GetDocumentFileName(identity, documentId, version, variant);
        }
    }
}
