//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Gecko.NCore.Client.Notification.V1 {
    using System.Runtime.Serialization;
    using System;
    
    
    /// <summary>
    /// Defines the identity of the user executing the request.
    /// </summary>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EphorteIdentity", Namespace="http://schemas.datacontract.org/2004/07/Ephorte.ServiceModel.Contracts.Notificati" +
        "on.V1")]
    [System.SerializableAttribute()]
    public partial class EphorteIdentity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DatabaseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExternalSystemNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        /// <summary>
        /// Gets or sets the database.
        /// </summary>
        /// <value>The database.</value>
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Database {
            get {
                return this.DatabaseField;
            }
            set {
                if ((object.ReferenceEquals(this.DatabaseField, value) != true)) {
                    this.DatabaseField = value;
                    this.RaisePropertyChanged("Database");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the password.
        /// </summary>
        /// <value>The password.</value>
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the role.
        /// </summary>
        /// <value>The role.</value>
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Role {
            get {
                return this.RoleField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleField, value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the username.
        /// </summary>
        /// <value>The username.</value>
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the name of the external system.
        /// </summary>
        /// <value>The name of the external system.</value>
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string ExternalSystemName {
            get {
                return this.ExternalSystemNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ExternalSystemNameField, value) != true)) {
                    this.ExternalSystemNameField = value;
                    this.RaisePropertyChanged("ExternalSystemName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <summary>
    /// Represents a notification request
    /// </summary>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NotificationRequest", Namespace="http://schemas.datacontract.org/2004/07/Ephorte.ServiceModel.Contracts.Notificati" +
        "on.V1")]
    [System.SerializableAttribute()]
    public partial class NotificationRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NotificationTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime NotifyChangesAfterThisField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        /// <summary>
        /// Gets or sets the type of the notification.
        /// </summary>
        /// <value>The type of the notification.</value>
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NotificationType {
            get {
                return this.NotificationTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.NotificationTypeField, value) != true)) {
                    this.NotificationTypeField = value;
                    this.RaisePropertyChanged("NotificationType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the notify changes after this.
        /// </summary>
        /// <value>The notify changes after this.</value>
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime NotifyChangesAfterThis {
            get {
                return this.NotifyChangesAfterThisField;
            }
            set {
                if ((this.NotifyChangesAfterThisField.Equals(value) != true)) {
                    this.NotifyChangesAfterThisField = value;
                    this.RaisePropertyChanged("NotifyChangesAfterThis");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <summary>
    /// Service for batch notification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.gecko.no/ephorte/services/notification/v1", ConfigurationName="Notification.V1.NotificationService")]
    public interface NotificationService {
        
        /// <summary>
        /// Notifies about changes.
        /// </summary>
        /// <param name="ephorteIdentity">The ephorte identity.</param>
        /// <param name="notificationRequest">The notification request.</param>
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/notification/v1/NotificationService/Notify", ReplyAction="http://www.gecko.no/ephorte/services/notification/v1/NotificationService/NotifyRe" +
            "sponse")]
        void Notify(Gecko.NCore.Client.Notification.V1.EphorteIdentity ephorteIdentity, Gecko.NCore.Client.Notification.V1.NotificationRequest notificationRequest);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface NotificationServiceChannel : Gecko.NCore.Client.Notification.V1.NotificationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NotificationServiceClient : System.ServiceModel.ClientBase<Gecko.NCore.Client.Notification.V1.NotificationService>, Gecko.NCore.Client.Notification.V1.NotificationService {
        
        public NotificationServiceClient() {
        }
        
        public NotificationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NotificationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotificationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotificationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Notify(Gecko.NCore.Client.Notification.V1.EphorteIdentity ephorteIdentity, Gecko.NCore.Client.Notification.V1.NotificationRequest notificationRequest) {
            base.Channel.Notify(ephorteIdentity, notificationRequest);
        }
    }
}
