<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ephorte.ServiceModel.Contracts.ObjectModel</name>
    </assembly>
    <members>
        <member name="T:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.BooleanFieldMapper">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.DefaultFieldMapper">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.FieldMapper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.FieldMapper.AssignValue(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Assigns the value.
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="propertyInfo">The property info.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.FieldMapper.AssignValueCore(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Assigns the value.
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="propertyInfo">The property info.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.FieldMapper.ExtractValue(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Extracts the value.
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="propertyInfo">The property info.</param>
            <returns></returns>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.FieldMapper.ExtractValueCore(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Extracts the value core.
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="propertyInfo">The property info.</param>
            <returns></returns>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.DefaultFieldMapper.AssignValueCore(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Assigns the value.
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="propertyInfo">The property info.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.DefaultFieldMapper.ExtractValueCore(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Extracts the value core.
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="propertyInfo">The property info.</param>
            <returns></returns>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.DefaultFieldMapper.ConvertValue(System.Object,System.Type)">
            <summary>
            Converts the value.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <returns></returns>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.BooleanFieldMapper.AssignValueCore(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Assigns the value.
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="propertyInfo">The property info.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.BooleanFieldMapper.ExtractValueCore(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Extracts the value core.
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="propertyInfo">The property info.</param>
            <returns></returns>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.BooleanFieldMapper.ConvertValue(System.Object)">
            <summary>
            Converts the value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.BooleanFieldMappingAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.FieldMappingAttribute">
            <summary>
            This class is used to mark which field a data contract property maps to.
            </summary>
        </member>
        <member name="T:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.MappingAttribute">
            <summary>
            This class is used as an abstract base class for attributes used to map data contracts.
            </summary>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.MappingAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.MappingAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.MappingAttribute.IsDefined(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified element is defined.
            </summary>
            <param name="element">The element.</param>
            <returns>
            	<c>true</c> if the specified element is defined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.MappingAttribute.GetCustomAttribute(System.Reflection.MemberInfo)">
            <summary>
            Gets the custom attribute.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="P:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.MappingAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.MappingAttribute.ConditionalField">
            <summary>
            Gets or sets the conditional.
            </summary>
            <value>The conditional.</value>
        </member>
        <member name="P:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.MappingAttribute.ConditionalValue">
            <summary>
            Gets or sets the conditional value.
            </summary>
            <value>The conditional value.</value>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.FieldMappingAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.FieldMappingAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.FieldMappingAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.FieldMappingAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="fieldMapperType">Type of the field mapper.</param>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.FieldMappingAttribute.IsDefined(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified element is defined.
            </summary>
            <param name="element">The element.</param>
            <returns>
            	<c>true</c> if the specified element is defined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.FieldMappingAttribute.GetCustomAttribute(System.Reflection.MemberInfo)">
            <summary>
            Gets the custom attribute.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.FieldMappingAttribute.ExtractValue(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Extracts the value.
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="propertyInfo">The property info.</param>
            <returns></returns>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.FieldMappingAttribute.AssignValue(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Assigns the value.
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="propertyInfo">The property info.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.FieldMappingAttribute.FieldMapper">
            <summary>
            Gets or sets the type of the field mapper.
            </summary>
            <value>The type of the field mapper.</value>
        </member>
        <member name="P:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.FieldMappingAttribute.IsPrimaryKey">
            <summary>
            Gets or sets a value indicating whether this instance is primary key.
            </summary>
            <value>
            	<c>true</c> if this instance is primary key; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.BooleanFieldMappingAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.BooleanFieldMappingAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.BooleanFieldMappingAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.BooleanFieldMappingAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="fieldMapperType">Type of the field mapper.</param>
        </member>
        <member name="T:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.ConvertingFieldMapper`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.ConvertingFieldMapper`1.AssignValueCore(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Assigns the value.  (Converts type if needed)
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="propertyInfo">The property info.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.ConvertingFieldMapper`1.ExtractValueCore(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Extracts the value. (Converts type if needed)
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="propertyInfo">The property info.</param>
            <returns></returns>
        </member>
        <member name="T:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.DataObjectTypeDescriminatorAttribute">
            <summary>
            Indicates which field to use as a discriminator to select the appropriate derived class.
            </summary>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.DataObjectTypeDescriminatorAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.DataObjectTypeDescriminatorAttribute"/> class.
            </summary>
            <param name="discriminatorFieldName"></param>
        </member>
        <member name="P:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.DataObjectTypeDescriminatorAttribute.DescriminatorFieldName">
            <summary>
            Gets or sets the name of the field.
            </summary>
            <value>The name of the field.</value>
        </member>
        <member name="T:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.DataObjectTypeDescriminatorValueAttribute">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.DataObjectTypeDescriminatorValueAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.DataObjectTypeDescriminatorValueAttribute"/> class.
            </summary>
            <param name="descrimintatorValue">The descrimintator value.</param>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.DataObjectTypeDescriminatorValueAttribute.IsMatch(System.Object)">
            <summary>
            Determines whether the specified values is match.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified values is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.DataObjectTypeDescriminatorValueAttribute.DescriminatorValue">
            <summary>
            Gets the descriminator value.
            </summary>
            <value>The descriminator value.</value>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.EnumFieldMapper`1.AssignValueCore(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Assigns the value.
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="propertyInfo">The property info.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.EnumFieldMapper`1.ExtractValueCore(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Extracts the value core.
            </summary>
            <param name="dataObject">The data object.</param>
            <param name="propertyInfo">The property info.</param>
            <returns></returns>
        </member>
        <member name="T:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.ObjectMappingAttribute">
            <summary>
            This class is used to mark which object data contracts map to.
            </summary>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.ObjectMappingAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.ObjectMappingAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.ObjectMappingAttribute.IsDefined(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified element is defined.
            </summary>
            <param name="element">The element.</param>
            <returns>
            	<c>true</c> if the specified element is defined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.ObjectMappingAttribute.GetCustomAttribute(System.Reflection.MemberInfo)">
            <summary>
            Gets the custom attribute.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="T:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.ReferenceMappingAttribute">
            <summary>
            This attribute is used to mark a reference mapping to a related object.
            </summary>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.ReferenceMappingAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.ReferenceMappingAttribute"/> class.
            </summary>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.ReferenceMappingAttribute.IsDefined(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified element is defined.
            </summary>
            <param name="element">The element.</param>
            <returns>
            	<c>true</c> if the specified element is defined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.ReferenceMappingAttribute.GetCustomAttribute(System.Reflection.MemberInfo)">
            <summary>
            Gets the custom attribute.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="P:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.ReferenceMappingAttribute.ReferenceName">
            <summary>
            Gets or sets the name of the reference.
            </summary>
            <value>The name of the reference.</value>
        </member>
        <member name="P:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.ReferenceMappingAttribute.Where">
            <summary>
            Gets or sets the where.
            </summary>
            <value>The where.</value>
        </member>
        <member name="P:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.ReferenceMappingAttribute.UseJoinedQuery">
            <summary>
            Gets or sets a value indicating whether [allow join].
            </summary>
            <value><c>true</c> if [allow join]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.ReferenceSetMappingAttribute">
            <summary>
            This attribute is used to mark which objects a property is mapped to.
            </summary>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.ReferenceSetMappingAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.ReferenceSetMappingAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="referenceName">Name of the reference.</param>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.ReferenceSetMappingAttribute.IsDefined(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified element is defined.
            </summary>
            <param name="element">The element.</param>
            <returns>
            	<c>true</c> if the specified element is defined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.ReferenceSetMappingAttribute.GetCustomAttribute(System.Reflection.MemberInfo)">
            <summary>
            Gets the custom attribute.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="P:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.ReferenceSetMappingAttribute.ReferenceName">
            <summary>
            Gets or sets the name of the reference.
            </summary>
            <value>The name of the reference.</value>
        </member>
        <member name="P:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.ReferenceSetMappingAttribute.Where">
            <summary>
            Gets or sets the where.
            </summary>
            <value>The where.</value>
        </member>
        <member name="P:Ephorte.ServiceModel.Contracts.ObjectModel.Mapping.ReferenceSetMappingAttribute.Select">
            <summary>
            Gets or sets the additional select.
            </summary>
            <value>The additional select.</value>
        </member>
    </members>
</doc>
