//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Gecko.NCore.Client.Documents.V2 {
    using System.Runtime.Serialization;
    using System;
    
    
    /// <summary>
    /// Defines the identity of the user executing the request.
    /// </summary>
    /// <seealso cref="T:IEphorteIdentity" />
    /// <seealso cref="T:EphorteIdentityComparer" />
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EphorteIdentity", Namespace="http://schemas.datacontract.org/2004/07/Ephorte.ServiceModel.Contracts")]
    [System.SerializableAttribute()]
    public partial class EphorteIdentity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DatabaseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExternalSystemNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        /// <summary>
        /// Gets or sets the database.
        /// </summary>
        /// <value>The database.</value>
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Database {
            get {
                return this.DatabaseField;
            }
            set {
                if ((object.ReferenceEquals(this.DatabaseField, value) != true)) {
                    this.DatabaseField = value;
                    this.RaisePropertyChanged("Database");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the password.
        /// </summary>
        /// <value>The password.</value>
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the role.
        /// </summary>
        /// <value>The role.</value>
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Role {
            get {
                return this.RoleField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleField, value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the username.
        /// </summary>
        /// <value>The username.</value>
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the name of the external system.
        /// </summary>
        /// <value>The name of the external system.</value>
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string ExternalSystemName {
            get {
                return this.ExternalSystemNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ExternalSystemNameField, value) != true)) {
                    this.ExternalSystemNameField = value;
                    this.RaisePropertyChanged("ExternalSystemName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <summary>
    /// 
    /// </summary>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BeginReadDocumentResponse", Namespace="http://schemas.datacontract.org/2004/07/Ephorte.ServiceModel.Contracts.Documents." +
        "V2")]
    [System.SerializableAttribute()]
    public partial class BeginReadDocumentResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ContentLengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ContextIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FilenameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        /// <summary>
        /// Gets or sets the size.
        /// </summary>
        /// <value>The size.</value>
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ContentLength {
            get {
                return this.ContentLengthField;
            }
            set {
                if ((this.ContentLengthField.Equals(value) != true)) {
                    this.ContentLengthField = value;
                    this.RaisePropertyChanged("ContentLength");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the session id.
        /// </summary>
        /// <value>The session id.</value>
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ContextId {
            get {
                return this.ContextIdField;
            }
            set {
                if ((this.ContextIdField.Equals(value) != true)) {
                    this.ContextIdField = value;
                    this.RaisePropertyChanged("ContextId");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the filename.
        /// </summary>
        /// <value>The filename.</value>
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Filename {
            get {
                return this.FilenameField;
            }
            set {
                if ((object.ReferenceEquals(this.FilenameField, value) != true)) {
                    this.FilenameField = value;
                    this.RaisePropertyChanged("Filename");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <summary>
    /// Defines the <see cref="T:System.ServiceModel.ServiceContractAttribute">Service Contract</see> for <see cref="T:IDocuments" /> end points.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.gecko.no/ephorte/services/documents/v2", ConfigurationName="Documents.V2.Documents")]
    public interface Documents {
        
        /// <summary>
        /// Initiates a the checkin process.
        /// </summary>
        /// <param name="identity">The identity.</param>
        /// <param name="documentId">The document id.</param>
        /// <param name="version">The version.</param>
        /// <param name="variant">The variant.</param>
        /// <returns></returns>
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v2/Documents/BeginCheckin", ReplyAction="http://www.gecko.no/ephorte/services/documents/v2/Documents/BeginCheckinResponse")]
        System.Guid BeginCheckin(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, int documentId, int version, string variant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v2/Documents/BeginCheckin", ReplyAction="http://www.gecko.no/ephorte/services/documents/v2/Documents/BeginCheckinResponse")]
        System.Threading.Tasks.Task<System.Guid> BeginCheckinAsync(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, int documentId, int version, string variant);
        
        /// <summary>
        /// Writes the checkin chunk.
        /// </summary>
        /// <param name="identity">The identity.</param>
        /// <param name="contextId">The context id.</param>
        /// <param name="contentChunk">The content chunk.</param>
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v2/Documents/WriteCheckinChunk", ReplyAction="http://www.gecko.no/ephorte/services/documents/v2/Documents/WriteCheckinChunkResp" +
            "onse")]
        void WriteCheckinChunk(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId, byte[] contentChunk);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v2/Documents/WriteCheckinChunk", ReplyAction="http://www.gecko.no/ephorte/services/documents/v2/Documents/WriteCheckinChunkResp" +
            "onse")]
        System.Threading.Tasks.Task WriteCheckinChunkAsync(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId, byte[] contentChunk);
        
        /// <summary>
        /// Ends the checkin.
        /// </summary>
        /// <param name="identity">The identity.</param>
        /// <param name="contextId">The context id.</param>
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v2/Documents/EndCheckin", ReplyAction="http://www.gecko.no/ephorte/services/documents/v2/Documents/EndCheckinResponse")]
        void EndCheckin(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v2/Documents/EndCheckin", ReplyAction="http://www.gecko.no/ephorte/services/documents/v2/Documents/EndCheckinResponse")]
        System.Threading.Tasks.Task EndCheckinAsync(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId);
        
        /// <summary>
        /// Cancels the checkin.
        /// </summary>
        /// <param name="identity">The identity.</param>
        /// <param name="contextId">The context id.</param>
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v2/Documents/CancelCheckin", ReplyAction="http://www.gecko.no/ephorte/services/documents/v2/Documents/CancelCheckinResponse" +
            "")]
        void CancelCheckin(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v2/Documents/CancelCheckin", ReplyAction="http://www.gecko.no/ephorte/services/documents/v2/Documents/CancelCheckinResponse" +
            "")]
        System.Threading.Tasks.Task CancelCheckinAsync(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId);
        
        /// <summary>
        /// Begins the checkout.
        /// </summary>
        /// <param name="identity">The identity.</param>
        /// <param name="documentId">The document id.</param>
        /// <param name="version">The version.</param>
        /// <param name="variant">The variant.</param>
        /// <returns></returns>
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v2/Documents/BeginCheckout", ReplyAction="http://www.gecko.no/ephorte/services/documents/v2/Documents/BeginCheckoutResponse" +
            "")]
        System.Guid BeginCheckout(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, int documentId, int version, string variant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v2/Documents/BeginCheckout", ReplyAction="http://www.gecko.no/ephorte/services/documents/v2/Documents/BeginCheckoutResponse" +
            "")]
        System.Threading.Tasks.Task<System.Guid> BeginCheckoutAsync(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, int documentId, int version, string variant);
        
        /// <summary>
        /// Reads the checkout chunk.
        /// </summary>
        /// <param name="identity">The identity.</param>
        /// <param name="contextId">The context id.</param>
        /// <returns></returns>
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v2/Documents/ReadCheckoutChunk", ReplyAction="http://www.gecko.no/ephorte/services/documents/v2/Documents/ReadCheckoutChunkResp" +
            "onse")]
        byte[] ReadCheckoutChunk(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v2/Documents/ReadCheckoutChunk", ReplyAction="http://www.gecko.no/ephorte/services/documents/v2/Documents/ReadCheckoutChunkResp" +
            "onse")]
        System.Threading.Tasks.Task<byte[]> ReadCheckoutChunkAsync(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId);
        
        /// <summary>
        /// Ends the checkout.
        /// </summary>
        /// <param name="identity">The identity.</param>
        /// <param name="contextId">The context id.</param>
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v2/Documents/EndCheckout", ReplyAction="http://www.gecko.no/ephorte/services/documents/v2/Documents/EndCheckoutResponse")]
        void EndCheckout(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v2/Documents/EndCheckout", ReplyAction="http://www.gecko.no/ephorte/services/documents/v2/Documents/EndCheckoutResponse")]
        System.Threading.Tasks.Task EndCheckoutAsync(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId);
        
        /// <summary>
        /// Cancels the checkout.
        /// </summary>
        /// <param name="identity">The identity.</param>
        /// <param name="journalpostId">The journalpost id.</param>
        /// <param name="documentId">The document id.</param>
        /// <param name="version">The version.</param>
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v2/Documents/CancelCheckout", ReplyAction="http://www.gecko.no/ephorte/services/documents/v2/Documents/CancelCheckoutRespons" +
            "e")]
        void CancelCheckout(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, int journalpostId, int documentId, int version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v2/Documents/CancelCheckout", ReplyAction="http://www.gecko.no/ephorte/services/documents/v2/Documents/CancelCheckoutRespons" +
            "e")]
        System.Threading.Tasks.Task CancelCheckoutAsync(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, int journalpostId, int documentId, int version);
        
        /// <summary>
        /// Ends the document read.
        /// </summary>
        /// <param name="identity">The identity.</param>
        /// <param name="contextId">The context id.</param>
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v2/Documents/EndDocumentRead", ReplyAction="http://www.gecko.no/ephorte/services/documents/v2/Documents/EndDocumentReadRespon" +
            "se")]
        void EndDocumentRead(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v2/Documents/EndDocumentRead", ReplyAction="http://www.gecko.no/ephorte/services/documents/v2/Documents/EndDocumentReadRespon" +
            "se")]
        System.Threading.Tasks.Task EndDocumentReadAsync(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId);
        
        /// <summary>
        /// Begins the read document.
        /// </summary>
        /// <param name="identity">The identity.</param>
        /// <param name="documentId">The document id.</param>
        /// <param name="version">The version.</param>
        /// <param name="variant">The variant.</param>
        /// <param name="journalpostId">The journalpost id.</param>
        /// <param name="moeteId">The moete id.</param>
        /// <param name="utvalgsbehandlingId">The utvalgsbehandling id.</param>
        /// <param name="sakType">Type of the sak.</param>
        /// <param name="dokumentType">Type of the dokument.</param>
        /// <returns></returns>
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v2/Documents/BeginReadDocument", ReplyAction="http://www.gecko.no/ephorte/services/documents/v2/Documents/BeginReadDocumentResp" +
            "onse")]
        Gecko.NCore.Client.Documents.V2.BeginReadDocumentResponse BeginReadDocument(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Nullable<int> documentId, System.Nullable<int> version, string variant, System.Nullable<int> journalpostId, System.Nullable<int> moeteId, System.Nullable<int> utvalgsbehandlingId, string sakType, string dokumentType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v2/Documents/BeginReadDocument", ReplyAction="http://www.gecko.no/ephorte/services/documents/v2/Documents/BeginReadDocumentResp" +
            "onse")]
        System.Threading.Tasks.Task<Gecko.NCore.Client.Documents.V2.BeginReadDocumentResponse> BeginReadDocumentAsync(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Nullable<int> documentId, System.Nullable<int> version, string variant, System.Nullable<int> journalpostId, System.Nullable<int> moeteId, System.Nullable<int> utvalgsbehandlingId, string sakType, string dokumentType);
        
        /// <summary>
        /// Reads the document chunk.
        /// </summary>
        /// <param name="identity">The identity.</param>
        /// <param name="contextId">The context id.</param>
        /// <returns></returns>
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v2/Documents/ReadDocumentChunk", ReplyAction="http://www.gecko.no/ephorte/services/documents/v2/Documents/ReadDocumentChunkResp" +
            "onse")]
        byte[] ReadDocumentChunk(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v2/Documents/ReadDocumentChunk", ReplyAction="http://www.gecko.no/ephorte/services/documents/v2/Documents/ReadDocumentChunkResp" +
            "onse")]
        System.Threading.Tasks.Task<byte[]> ReadDocumentChunkAsync(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId);
        
        /// <summary>
        /// Cancels the read document.
        /// </summary>
        /// <param name="identity">The identity.</param>
        /// <param name="contextId">The context id.</param>
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v2/Documents/CancelReadDocument", ReplyAction="http://www.gecko.no/ephorte/services/documents/v2/Documents/CancelReadDocumentRes" +
            "ponse")]
        void CancelReadDocument(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/documents/v2/Documents/CancelReadDocument", ReplyAction="http://www.gecko.no/ephorte/services/documents/v2/Documents/CancelReadDocumentRes" +
            "ponse")]
        System.Threading.Tasks.Task CancelReadDocumentAsync(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface DocumentsChannel : Gecko.NCore.Client.Documents.V2.Documents, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DocumentsClient : System.ServiceModel.ClientBase<Gecko.NCore.Client.Documents.V2.Documents>, Gecko.NCore.Client.Documents.V2.Documents {
        
        public DocumentsClient() {
        }
        
        public DocumentsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DocumentsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DocumentsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DocumentsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Guid BeginCheckin(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, int documentId, int version, string variant) {
            return base.Channel.BeginCheckin(identity, documentId, version, variant);
        }
        
        public System.Threading.Tasks.Task<System.Guid> BeginCheckinAsync(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, int documentId, int version, string variant) {
            return base.Channel.BeginCheckinAsync(identity, documentId, version, variant);
        }
        
        public void WriteCheckinChunk(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId, byte[] contentChunk) {
            base.Channel.WriteCheckinChunk(identity, contextId, contentChunk);
        }
        
        public System.Threading.Tasks.Task WriteCheckinChunkAsync(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId, byte[] contentChunk) {
            return base.Channel.WriteCheckinChunkAsync(identity, contextId, contentChunk);
        }
        
        public void EndCheckin(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId) {
            base.Channel.EndCheckin(identity, contextId);
        }
        
        public System.Threading.Tasks.Task EndCheckinAsync(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId) {
            return base.Channel.EndCheckinAsync(identity, contextId);
        }
        
        public void CancelCheckin(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId) {
            base.Channel.CancelCheckin(identity, contextId);
        }
        
        public System.Threading.Tasks.Task CancelCheckinAsync(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId) {
            return base.Channel.CancelCheckinAsync(identity, contextId);
        }
        
        public System.Guid BeginCheckout(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, int documentId, int version, string variant) {
            return base.Channel.BeginCheckout(identity, documentId, version, variant);
        }
        
        public System.Threading.Tasks.Task<System.Guid> BeginCheckoutAsync(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, int documentId, int version, string variant) {
            return base.Channel.BeginCheckoutAsync(identity, documentId, version, variant);
        }
        
        public byte[] ReadCheckoutChunk(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId) {
            return base.Channel.ReadCheckoutChunk(identity, contextId);
        }
        
        public System.Threading.Tasks.Task<byte[]> ReadCheckoutChunkAsync(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId) {
            return base.Channel.ReadCheckoutChunkAsync(identity, contextId);
        }
        
        public void EndCheckout(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId) {
            base.Channel.EndCheckout(identity, contextId);
        }
        
        public System.Threading.Tasks.Task EndCheckoutAsync(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId) {
            return base.Channel.EndCheckoutAsync(identity, contextId);
        }
        
        public void CancelCheckout(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, int journalpostId, int documentId, int version) {
            base.Channel.CancelCheckout(identity, journalpostId, documentId, version);
        }
        
        public System.Threading.Tasks.Task CancelCheckoutAsync(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, int journalpostId, int documentId, int version) {
            return base.Channel.CancelCheckoutAsync(identity, journalpostId, documentId, version);
        }
        
        public void EndDocumentRead(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId) {
            base.Channel.EndDocumentRead(identity, contextId);
        }
        
        public System.Threading.Tasks.Task EndDocumentReadAsync(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId) {
            return base.Channel.EndDocumentReadAsync(identity, contextId);
        }
        
        public Gecko.NCore.Client.Documents.V2.BeginReadDocumentResponse BeginReadDocument(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Nullable<int> documentId, System.Nullable<int> version, string variant, System.Nullable<int> journalpostId, System.Nullable<int> moeteId, System.Nullable<int> utvalgsbehandlingId, string sakType, string dokumentType) {
            return base.Channel.BeginReadDocument(identity, documentId, version, variant, journalpostId, moeteId, utvalgsbehandlingId, sakType, dokumentType);
        }
        
        public System.Threading.Tasks.Task<Gecko.NCore.Client.Documents.V2.BeginReadDocumentResponse> BeginReadDocumentAsync(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Nullable<int> documentId, System.Nullable<int> version, string variant, System.Nullable<int> journalpostId, System.Nullable<int> moeteId, System.Nullable<int> utvalgsbehandlingId, string sakType, string dokumentType) {
            return base.Channel.BeginReadDocumentAsync(identity, documentId, version, variant, journalpostId, moeteId, utvalgsbehandlingId, sakType, dokumentType);
        }
        
        public byte[] ReadDocumentChunk(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId) {
            return base.Channel.ReadDocumentChunk(identity, contextId);
        }
        
        public System.Threading.Tasks.Task<byte[]> ReadDocumentChunkAsync(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId) {
            return base.Channel.ReadDocumentChunkAsync(identity, contextId);
        }
        
        public void CancelReadDocument(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId) {
            base.Channel.CancelReadDocument(identity, contextId);
        }
        
        public System.Threading.Tasks.Task CancelReadDocumentAsync(Gecko.NCore.Client.Documents.V2.EphorteIdentity identity, System.Guid contextId) {
            return base.Channel.CancelReadDocumentAsync(identity, contextId);
        }
    }
}
