//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18010
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Gecko.NCore.Client.ChangeTracking.V1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EphorteIdentity", Namespace="http://www.gecko.no/ephorte/services/changetracking/v1")]
    [System.SerializableAttribute()]
    public partial class EphorteIdentity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DatabaseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExternalSystemNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Database {
            get {
                return this.DatabaseField;
            }
            set {
                if ((object.ReferenceEquals(this.DatabaseField, value) != true)) {
                    this.DatabaseField = value;
                    this.RaisePropertyChanged("Database");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Role {
            get {
                return this.RoleField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleField, value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string ExternalSystemName {
            get {
                return this.ExternalSystemNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ExternalSystemNameField, value) != true)) {
                    this.ExternalSystemNameField = value;
                    this.RaisePropertyChanged("ExternalSystemName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataObjectChange", Namespace="http://www.gecko.no/ephorte/services/changetracking/v1")]
    [System.SerializableAttribute()]
    public partial class DataObjectChange : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ChangeTimestampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Gecko.NCore.Client.ChangeTracking.V1.ChangeType ChangetypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Gecko.NCore.Client.ChangeTracking.V1.DataObjectKey DataObjectKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DataObjectTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RecordIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CaseId {
            get {
                return this.CaseIdField;
            }
            set {
                if ((this.CaseIdField.Equals(value) != true)) {
                    this.CaseIdField = value;
                    this.RaisePropertyChanged("CaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ChangeTimestamp {
            get {
                return this.ChangeTimestampField;
            }
            set {
                if ((this.ChangeTimestampField.Equals(value) != true)) {
                    this.ChangeTimestampField = value;
                    this.RaisePropertyChanged("ChangeTimestamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Gecko.NCore.Client.ChangeTracking.V1.ChangeType Changetype {
            get {
                return this.ChangetypeField;
            }
            set {
                if ((this.ChangetypeField.Equals(value) != true)) {
                    this.ChangetypeField = value;
                    this.RaisePropertyChanged("Changetype");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Gecko.NCore.Client.ChangeTracking.V1.DataObjectKey DataObjectKey {
            get {
                return this.DataObjectKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.DataObjectKeyField, value) != true)) {
                    this.DataObjectKeyField = value;
                    this.RaisePropertyChanged("DataObjectKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataObjectType {
            get {
                return this.DataObjectTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.DataObjectTypeField, value) != true)) {
                    this.DataObjectTypeField = value;
                    this.RaisePropertyChanged("DataObjectType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RecordId {
            get {
                return this.RecordIdField;
            }
            set {
                if ((this.RecordIdField.Equals(value) != true)) {
                    this.RecordIdField = value;
                    this.RaisePropertyChanged("RecordId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChangeType", Namespace="http://www.gecko.no/ephorte/services/changetracking/v1")]
    public enum ChangeType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Undefined = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InsertUpdate = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Delete = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="DataObjectKey", Namespace="http://www.gecko.no/ephorte/services/changetracking/v1", ItemName="Field", KeyName="Name", ValueName="Value")]
    [System.SerializableAttribute()]
    public class DataObjectKey : System.Collections.Generic.Dictionary<string, string> {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.gecko.no/ephorte/services/changetracking/v1", ConfigurationName="ChangeTracking.V1.ChangeTrackingService")]
    public interface ChangeTrackingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/changetracking/v1/ChangeTrackingService/GetC" +
            "hangesForCaseDataObjects", ReplyAction="http://www.gecko.no/ephorte/services/changetracking/v1/ChangeTrackingService/GetC" +
            "hangesForCaseDataObjectsResponse")]
        Gecko.NCore.Client.ChangeTracking.V1.DataObjectChange[] GetChangesForCaseDataObjects(Gecko.NCore.Client.ChangeTracking.V1.EphorteIdentity identity, int[] caseIds, System.DateTime after);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/changetracking/v1/ChangeTrackingService/GetC" +
            "hangesForCaseDataObjects", ReplyAction="http://www.gecko.no/ephorte/services/changetracking/v1/ChangeTrackingService/GetC" +
            "hangesForCaseDataObjectsResponse")]
        System.Threading.Tasks.Task<Gecko.NCore.Client.ChangeTracking.V1.DataObjectChange[]> GetChangesForCaseDataObjectsAsync(Gecko.NCore.Client.ChangeTracking.V1.EphorteIdentity identity, int[] caseIds, System.DateTime after);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/changetracking/v1/ChangeTrackingService/GetC" +
            "hangesForRecordDataObjects", ReplyAction="http://www.gecko.no/ephorte/services/changetracking/v1/ChangeTrackingService/GetC" +
            "hangesForRecordDataObjectsResponse")]
        Gecko.NCore.Client.ChangeTracking.V1.DataObjectChange[] GetChangesForRecordDataObjects(Gecko.NCore.Client.ChangeTracking.V1.EphorteIdentity identity, int[] recordIds, System.DateTime after);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/changetracking/v1/ChangeTrackingService/GetC" +
            "hangesForRecordDataObjects", ReplyAction="http://www.gecko.no/ephorte/services/changetracking/v1/ChangeTrackingService/GetC" +
            "hangesForRecordDataObjectsResponse")]
        System.Threading.Tasks.Task<Gecko.NCore.Client.ChangeTracking.V1.DataObjectChange[]> GetChangesForRecordDataObjectsAsync(Gecko.NCore.Client.ChangeTracking.V1.EphorteIdentity identity, int[] recordIds, System.DateTime after);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ChangeTrackingServiceChannel : Gecko.NCore.Client.ChangeTracking.V1.ChangeTrackingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangeTrackingServiceClient : System.ServiceModel.ClientBase<Gecko.NCore.Client.ChangeTracking.V1.ChangeTrackingService>, Gecko.NCore.Client.ChangeTracking.V1.ChangeTrackingService {
        
        public ChangeTrackingServiceClient() {
        }
        
        public ChangeTrackingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ChangeTrackingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChangeTrackingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChangeTrackingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Gecko.NCore.Client.ChangeTracking.V1.DataObjectChange[] GetChangesForCaseDataObjects(Gecko.NCore.Client.ChangeTracking.V1.EphorteIdentity identity, int[] caseIds, System.DateTime after) {
            return base.Channel.GetChangesForCaseDataObjects(identity, caseIds, after);
        }
        
        public System.Threading.Tasks.Task<Gecko.NCore.Client.ChangeTracking.V1.DataObjectChange[]> GetChangesForCaseDataObjectsAsync(Gecko.NCore.Client.ChangeTracking.V1.EphorteIdentity identity, int[] caseIds, System.DateTime after) {
            return base.Channel.GetChangesForCaseDataObjectsAsync(identity, caseIds, after);
        }
        
        public Gecko.NCore.Client.ChangeTracking.V1.DataObjectChange[] GetChangesForRecordDataObjects(Gecko.NCore.Client.ChangeTracking.V1.EphorteIdentity identity, int[] recordIds, System.DateTime after) {
            return base.Channel.GetChangesForRecordDataObjects(identity, recordIds, after);
        }
        
        public System.Threading.Tasks.Task<Gecko.NCore.Client.ChangeTracking.V1.DataObjectChange[]> GetChangesForRecordDataObjectsAsync(Gecko.NCore.Client.ChangeTracking.V1.EphorteIdentity identity, int[] recordIds, System.DateTime after) {
            return base.Channel.GetChangesForRecordDataObjectsAsync(identity, recordIds, after);
        }
    }
}
