//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Gecko.NCore.Client.Functions.V1 {
    using System.Runtime.Serialization;
    using System;
    
    
    /// <summary>
    /// Defines the identity of the user executing the request.
    /// </summary>
    /// <seealso cref="T:IEphorteIdentity" />
    /// <seealso cref="T:EphorteIdentityComparer" />
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EphorteIdentity", Namespace="http://schemas.datacontract.org/2004/07/Ephorte.ServiceModel.Contracts")]
    [System.SerializableAttribute()]
    public partial class EphorteIdentity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DatabaseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExternalSystemNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        /// <summary>
        /// Gets or sets the database.
        /// </summary>
        /// <value>The database.</value>
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Database {
            get {
                return this.DatabaseField;
            }
            set {
                if ((object.ReferenceEquals(this.DatabaseField, value) != true)) {
                    this.DatabaseField = value;
                    this.RaisePropertyChanged("Database");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the password.
        /// </summary>
        /// <value>The password.</value>
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the role.
        /// </summary>
        /// <value>The role.</value>
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Role {
            get {
                return this.RoleField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleField, value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the username.
        /// </summary>
        /// <value>The username.</value>
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the name of the external system.
        /// </summary>
        /// <value>The name of the external system.</value>
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string ExternalSystemName {
            get {
                return this.ExternalSystemNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ExternalSystemNameField, value) != true)) {
                    this.ExternalSystemNameField = value;
                    this.RaisePropertyChanged("ExternalSystemName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <summary>
    /// Defines a class that contains descriptive information about supported functions.
    /// </summary>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FunctionDescriptor", Namespace="http://schemas.datacontract.org/2004/07/Ephorte.ServiceModel.Contracts.Functions." +
        "V1")]
    [System.SerializableAttribute()]
    public partial class FunctionDescriptor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string DescriptionField;
        
        private string NameField;
        
        private Gecko.NCore.Client.Functions.V1.FunctionParameterDictionary ParametersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        /// <summary>
        /// Gets or sets the description.
        /// </summary>
        /// <value>The description.</value>
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>The name.</value>
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the parameters.
        /// </summary>
        /// <value>The parameters.</value>
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Gecko.NCore.Client.Functions.V1.FunctionParameterDictionary Parameters {
            get {
                return this.ParametersField;
            }
            set {
                if ((object.ReferenceEquals(this.ParametersField, value) != true)) {
                    this.ParametersField = value;
                    this.RaisePropertyChanged("Parameters");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <summary>
    /// Defines a class that contains a collection of parameters required by the <see cref="T:FunctionDescriptor">function</see>.
    /// </summary>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="FunctionParameterDictionary", Namespace="http://schemas.datacontract.org/2004/07/Ephorte.ServiceModel.Contracts.Functions." +
        "V1", ItemName="Parameter", KeyName="Name", ValueName="Type")]
    [System.SerializableAttribute()]
    public class FunctionParameterDictionary : System.Collections.Generic.Dictionary<string, System.TypeCode> {
    }
    
    /// <summary>
    /// Defines a base class
    /// </summary>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FunctionResult", Namespace="http://schemas.datacontract.org/2004/07/Ephorte.ServiceModel.Contracts.Functions." +
        "V1")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.TypeCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Gecko.NCore.Client.Functions.V1.FunctionDescriptor[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Gecko.NCore.Client.Functions.V1.FunctionDescriptor))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Gecko.NCore.Client.Functions.V1.FunctionParameterDictionary))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(object[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Gecko.NCore.Client.Functions.V1.EphorteIdentity))]
    public partial class FunctionResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object ResultValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        /// <summary>
        /// Gets or sets the result.
        /// </summary>
        /// <value>The result.</value>
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object ResultValue {
            get {
                return this.ResultValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultValueField, value) != true)) {
                    this.ResultValueField = value;
                    this.RaisePropertyChanged("ResultValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <summary>
    /// Defines a contract for a service working as a function handler.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.gecko.no/ephorte/services/functions/v1", ConfigurationName="Functions.V1.FunctionsService")]
    public interface FunctionsService {
        
        /// <summary>
        /// Queries the functions supported by the service.
        /// </summary>
        /// <param name="identity">The identity.</param>
        /// <returns>
        /// A collection of <see cref="T:FunctionDescriptor">function descriptors</see>
        /// </returns>
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/functions/v1/FunctionsService/QueryFunctionD" +
            "escriptors", ReplyAction="http://www.gecko.no/ephorte/services/functions/v1/FunctionsService/QueryFunctionD" +
            "escriptorsResponse")]
        Gecko.NCore.Client.Functions.V1.FunctionDescriptor[] QueryFunctionDescriptors(Gecko.NCore.Client.Functions.V1.EphorteIdentity identity);
        
        /// <summary>
        /// Executes the function.
        /// </summary>
        /// <param name="identity">The identity.</param>
        /// <param name="name">The name of the function to execute.</param>
        /// <param name="parameters">The parameters required by the function.</param>
        /// <returns>
        /// The result of the function executed, if any.
        /// </returns>
        [System.ServiceModel.OperationContractAttribute(Action="http://www.gecko.no/ephorte/services/functions/v1/FunctionsService/ExecuteFunctio" +
            "n", ReplyAction="http://www.gecko.no/ephorte/services/functions/v1/FunctionsService/ExecuteFunctio" +
            "nResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.TypeCode))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Gecko.NCore.Client.Functions.V1.FunctionDescriptor[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Gecko.NCore.Client.Functions.V1.FunctionDescriptor))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Gecko.NCore.Client.Functions.V1.FunctionParameterDictionary))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Gecko.NCore.Client.Functions.V1.FunctionResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Gecko.NCore.Client.Functions.V1.EphorteIdentity))]
        Gecko.NCore.Client.Functions.V1.FunctionResult ExecuteFunction(Gecko.NCore.Client.Functions.V1.EphorteIdentity identity, string name, object[] parameters);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface FunctionsServiceChannel : Gecko.NCore.Client.Functions.V1.FunctionsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FunctionsServiceClient : System.ServiceModel.ClientBase<Gecko.NCore.Client.Functions.V1.FunctionsService>, Gecko.NCore.Client.Functions.V1.FunctionsService {
        
        public FunctionsServiceClient() {
        }
        
        public FunctionsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FunctionsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FunctionsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FunctionsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Gecko.NCore.Client.Functions.V1.FunctionDescriptor[] QueryFunctionDescriptors(Gecko.NCore.Client.Functions.V1.EphorteIdentity identity) {
            return base.Channel.QueryFunctionDescriptors(identity);
        }
        
        public Gecko.NCore.Client.Functions.V1.FunctionResult ExecuteFunction(Gecko.NCore.Client.Functions.V1.EphorteIdentity identity, string name, object[] parameters) {
            return base.Channel.ExecuteFunction(identity, name, parameters);
        }
    }
}
